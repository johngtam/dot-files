set shiftwidth=2
set expandtab
set autoindent
set smartindent
set cindent
set nocompatible

set encoding=utf-8
set scrolloff=3
set showmode
set showcmd
set hidden
set wildmenu

" Edit this setting if need be
set wildmode=list:longest
set completeopt+=longest
set completeopt-=menu
" End edit


set wildignore=*.o,*~,*.pyc
set visualbell
set cursorline
set ttyfast
set lazyredraw
set ruler
set backspace=indent,eol,start
set laststatus=2
set number
set relativenumber
set modifiable

set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set nobackup

" Remaps the semicolon key in normal mode to command
nnoremap ; :

" Maps tab in normal mode to switch tabs
nmap <s-tab> gT

" Remaps so I can repeat actions
vnoremap . :norm.<CR>

" Motion commands
map <Leader><Leader>l <Plug>(easymotion-bd-jk)
nmap <Leader><Leader>l <Plug>(easymotion-overwin-line)
" Move to word
map  <Leader><Leader>w <Plug>(easymotion-bd-w)
nmap <Leader><Leader>w <Plug>(easymotion-overwin-w)
" <Leader>f{char} to move to {char}
map  <Leader><Leader>f <Plug>(easymotion-bd-f)
nmap <Leader><Leader>f <Plug>(easymotion-overwin-f)

map j gj
map k gk

set foldmethod=marker
let mapleader = ","
nnoremap <leader><space> :nohlsearch<CR>

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set incsearch
set gdefault
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>
nnoremap space a<space><esc>    
nnoremap <leader>v :set paste<cr>
nnoremap <leader>c :set nopaste<cr>
map <leader>pp :setlocal paste!<cr>
"nnoremap <tab> %
"vnoremap <tab> %
nnoremap <C-5> %
vnoremap <C-5> %

" Autocompletion
imap <Tab> <C-P>
set completeopt=longest,menu
set wildmode=list:longest,list:full
set complete=.,t

" Copy and paste to system clipboard.
vnoremap <C-c> "*y
vnoremap <C-v> "*p

" Saving whenever I tab away
au FocusLost * :wa

" Setting sane settings for vim to wrap text
set wrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=85

" Setting sane options for switch-case indentation
set cinoptions=l1

" For switching windows in splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap g<c-]> <c-]>
vnoremap g<c-]> <c-]>

inoremap jj <ESC>

" For saving folds
" au BufWinLeave ?* mkview
" au BufWinEnter ?* silent loadview

" For acking
let g:ackprg = 'ag --nogroup --nocolor --column'

" Mapping scroll settings
:map <C-U> <C-Y><C-Y><C-Y><C-Y><C-Y><C-Y>
:map <C-D> <C-E><C-E><C-E><C-E><C-E><C-E>
  
" For faster scrolling
:map <ScrollWheelUp> <C-U>
:map <S-ScrollWheelUp> <C-U>
:map <ScrollWheelDown> <C-D>
:map <S-ScollWheelDown> <C-D>

syntax on
filetype plugin on
filetype indent on
set splitright
set splitbelow
:set mouse=a
execute pathogen#infect()

" Solarized
" syntax enable
set background=light
colorscheme solarized
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
let g:solarized_termcolors=256"

" autocmd BufEnter * lcd %:p:h
nnoremap ,cd :cd %:p:h<CR>:pwd<CR>

" Function so I can tell what fucking function I'm in
fun! ShowFuncName()
    let lnum = line(".")
    let col = col(".")
    echohl ModeMsg
    echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
    echohl None
    call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfun
map ,ff :call ShowFuncName() <CR>

" For mutt to have nice linebreaks
setlocal fo+=aw

" For boilerplating
au BufNewFile *.txt $r ~/dotfiles/template.txt

"-----------------------------------------------
" FZF Setup
"----------------------------------------------
set rtp+=~/.fzf
nnoremap <silent> <leader>fe :call fzf#run({'sink': 'tabe'})<CR>

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
" - window (nvim only)
let g:fzf_layout = { 'down': '~40%' }

"-----------------------------------------------
" Ag Settings
"----------------------------------------------
let g:ag_working_path_mode="r"
let g:ag_highlight=1

" Advanced customization using autoload functions
autocmd VimEnter * command! Colors
   \ call fzf#vim#colors({'left': '15%', 'options': '--reverse --margin 30%,0'})

"----------------------------------------------
" Startup screen for vim
"----------------------------------------------
autocmd VimEnter *
	    \   if !argc()
	    \ |   Startify
	    " \ |   NERDTree
	    \ |   wincmd p
	    \ | endif

autocmd VimEnter *
	    \   if argc()
	    " \ |   NERDTree
	    \ |   wincmd p
	    \ | endif

nnoremap <leader>n :NERDTreeToggle<CR>
map <leader>nf :NERDTreeFind<cr>

autocmd User Startified setlocal buftype=
" Don't open NERDtree in a split under startify
"
" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


let g:startify_custom_header = [
	    \ '  __     ___             _____ _____ ',
	    \ '  \ \   / (_)_ __ ___   |___  |___ / ',
	    \ '   \ \ / /| | ''_ ` _ \     / /  |_ \ ',
	    \ '    \ V / | | | | | | |   / /_ ___) |',
	    \ '     \_/  |_|_| |_| |_|  /_/(.)____/ ',
	    \ '',
	    \ '',
	    \ ]
let g:startify_bookmarks = [ '~/.vimrc',
	    \ '~/.bashrc',
	    \ '~/.ssh/config']

"----------------------------------------------
" undo @ startup
"----------------------------------------------
nnoremap <leader>u :GundoToggle<CR>
let g:gundo_right = 1
let g:gundo_auto_preview = 1

let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"

"----------------------------------------------
" Airline settings and for tabs/buffers
"----------------------------------------------
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

" Setup some default ignores
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
\}

" Use the nearest .git directory as the cwd
" This makes a lot of sense if you are working on a project that is in version
" control. It also supports works with .svn, .hg, .bzr.
let g:ctrlp_working_path_mode = 'r'

" Use a leader instead of the actual named binding
nmap <leader>p :CtrlP<cr>

" Easy bindings for its various modes
nmap <leader>bb :CtrlPBuffer<cr>
nmap <leader>bm :CtrlPMixed<cr>
nmap <leader>bs :CtrlPMRU<cr>
nmap <leader>bt :CtrlPTag<cr>

" Use the right side of the screen
let g:buffergator_viewport_split_policy = 'R'

" I want my own keymappings...
let g:buffergator_suppress_keymaps = 1

" Go to the previous buffer open
nmap <leader>jj :BuffergatorMruCyclePrev<cr>

" Go to the next buffer open
nmap <leader>kk :BuffergatorMruCycleNext<cr>

" View the entire list of buffers open
nmap <leader>bl :BuffergatorToggle<cr>

" Shared bindings from Solution #1 from earlier
nmap <leader>T :enew<cr>
nmap <leader>bq :bp <BAR> bd #<cr>

"----------------------------------------------
" Tagbar leader
"----------------------------------------------
nmap <leader>tt :TagbarToggle<CR>
autocmd FileType tagbar setlocal nocursorline nocursorcolumn
set tags=./tags;


"----------------------------------------------
" shortcuts for workplace stuff
"----------------------------------------------

:nnoremap <leader>rmw :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
:nnoremap <leader>fzf :FZF /Users/Tammanyhall/Desktop/work/trinity_v3/<CR>

" Change to 0 if I want to change this to NOT preview
" TODO: Need to find a way to modify gundo more.

" To indent the entire file correctly + mass comment
" gg=G
" Comment stuff out. Use gcc to comment out a line (takes a count)
" gc to comment out the target of a motion (for example, gcap to 
" comment out a paragraph), gc in visual mode to comment out the 
" selection, and gc in operator pending mode to target a comment. 
" You can also use it as a command, either with a range like :7,17Commentary,
" or as part of a :global invocation like with :g/TODO/Commentary. 
" That's it.


" TODO: learn more about vim notes/notepad? 
" TODO: learn more about using vim folds 
" TODO: learn more about git fugitive vim
