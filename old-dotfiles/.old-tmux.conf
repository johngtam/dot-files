unbind C-b
set -g prefix `
bind ` send-prefix
bind-key L last-window

set -g default-terminal "screen-256color"

# set -g default-command "reattach-to-user-namespace -l bash"

# Start numbering at 1
set -g base-index 1

# Make mouse useful in copy mode
# Allow mouse to select which pane to use
# set -g mouse on
setw -g mouse on

bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"

# Scroll history
set -g history-limit 50000

# # Set ability to capture on start and restore on exit window data when running an application
setw -g alternate-screen on

# #
#
# # Set status bar
set -g status-justify left
set -g status-bg black
set -g status-fg white
set-option -g status-interval 5
set -g status-right-length 150
set -g status-left ""
#
# # Rather than constraining window size to the maximum size of any client 
# # connected to the *session*, constrain window size to the maximum size of any 
# # client connected to *that window*. Much more reasonable.
setw -g aggressive-resize off
#
# # Allows us to use '<prefix>-a' <command> to send commands to a TMUX session inside 
# # another TMUX session
bind-key a send-prefix
#
# # Highlight active window
set-window-option -g window-status-current-bg red
#
# # Turn on vi bindings in copy mode
set-option -g status-keys vi
set-window-option -g mode-keys vi
#
# # Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
# #
#
# # Move around panes vim style
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
#
bind-key M-7 resize-pane -t 1 -x 90
bind-key M-8 resize-pane -t 1 -x 60
bind-key M-9 resize-pane -t 1 -x 30
bind-key M-0 resize-pane -t 0 -x 30
#
# # Copy to OSX clipboard
bind-key y run-shell "tmux save-buffer - | reattach-to-user-namespace pbcopy"

bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Fixing mouse scrolling
# run-shell ~/clone/path/scroll_copy_mode.tmux


